generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum USER_ROLE {
    OWNER
    MANAGER
    WORKER
}

model User {
    id         String       @id @default(cuid())
    fullName   String
    email      String       @unique
    password   String
    phoneNo    String       @unique
    address    String?
    isVerified Boolean      @default(false)
    role       USER_ROLE    @default(OWNER)
    Invitation Invitation[] @relation("InvitedBy")
    // Store       Store[]
    storeId    String?
    Store      Store?       @relation(fields: [storeId], references: [id])

    @@unique([email, phoneNo])
}

// Invitation schema
model Invitation {
    id          String  @id @default(cuid())
    email       String
    token       String
    invitedBy   User?   @relation("InvitedBy", fields: [invitedById], references: [id])
    invitedById String?
}

model Store {
    id          String  @id @default(cuid())
    name        String  @unique
    description String?
    ownerId     String  @unique
    storeLogoId String?
    storeLogo   Media?  @relation("StoreToStoreLogo", fields: [storeLogoId], references: [id])
    storeSlogan String?

    users User[]

    // owner   User?   @relation(fields: [ownerId], references: [id])

    products   Product[]  @relation("StoreToProducts")
    categories Category[] @relation("StoreToCategories")
    // sizes      Size[]     @relation("StoreToSizes")
    // colors     Color[]    @relation("StoreToColors")
    medias     Media[]    @relation("StoreToMedias")
    orders     Order[]    @relation("StoreToOrders")

    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    StoreSettings StoreSettings[]
}

// Store settings schema
model StoreSettings {
    id       String @id @default(cuid())
    storeId  String
    store    Store  @relation(fields: [storeId], references: [id])
    timeZone String
    currency String
}

enum PRODUCT_STATUS {
    ACTIVE
    DRAFTED
    ARCHIVED
}

model Category {
    id        String    @id @default(cuid())
    name      String
    storeId   String
    Store     Store     @relation("StoreToCategories", fields: [storeId], references: [id])
    products  Product[] @relation("CategoryToProducts")
    imageUrl  String?
    media     Media?    @relation(fields: [imageUrl], references: [url])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@index([storeId])
}

model Product {
    id                  String         @id @default(cuid())
    name                String
    description         String         @db.Text
    // quantity            Int
    isFeatured          Boolean        @default(false)
    allowOrderWhenEmpty Boolean        @default(true)
    status              PRODUCT_STATUS @default(ACTIVE)
    storeId             String
    Store               Store          @relation("StoreToProducts", fields: [storeId], references: [id])
    Category            Category?      @relation("CategoryToProducts", fields: [categoryId], references: [id])
    categoryId          String?
    orderId             String?
    orders              Order?         @relation(fields: [orderId], references: [id])
    medias              Media[]        @relation("ProductToMedias")

    variants Variant[] @relation("ProductToVariants")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([storeId, orderId])
}

enum SIZES {
    S
    M
    L
    XL
    XXL
}

enum COLORS {
    RED
    BLUE
    GREEN
    WHITE
    BLACK
    ORANGE
    GRAY
}

model Variant {
    id        String   @id @unique @default(cuid())
    productId String?
    Product   Product? @relation("ProductToVariants", fields: [productId], references: [id])

    stock    Int //Stock for that specific variant
    price    Float
    discount Float?
    size     SIZES
    color    COLORS
    // sizeId  String
    // size    Size   @relation("SizesToVariant", fields: [sizeId], references: [id])
    // colorId String
    // colors  Color  @relation("ColorsToVariant", fields: [colorId], references: [id])

    images Media[]

    @@index([productId])
}

// model Size {
//     id       String    @id @default(cuid())
//     name     String //like medium,large
//     value    String //like M,L,SM
//     storeId  String?
//     Store    Store?    @relation("StoreToSizes", fields: [storeId], references: [id])
//     variants Variant[] @relation("SizesToVariant")

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     @@index([storeId])
// }

// model Color {
//     id      String  @id @default(cuid())
//     name    String
//     value   String
//     storeId String?
//     Store   Store?  @relation("StoreToColors", fields: [storeId], references: [id])

//     variants Variant[] @relation("ColorsToVariant")

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     @@index([storeId])
// }

enum ORDER_STATUS {
    DRAFT
    PENDING
    PROCESSING
    DISPATCHED
    DELIVERED
    CANCELLED
    RETURNED
}

enum PAYMENT_STATUS {
    PAID
    UNPAID
    REFUNDED
}

model Order {
    id            String         @id @default(cuid())
    total         Float
    paymentStatus PAYMENT_STATUS @default(UNPAID)
    orderStatus   ORDER_STATUS   @default(DRAFT) // Can be enum: CREATED, PROCESSING, COMPLETED, CANCELED, etc.
    storeId       String
    store         Store          @relation("StoreToOrders", fields: [storeId], references: [id])
    products      Product[]
    Shipment      Shipment[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    @@index([storeId])
}

enum SHIPMENT_STATUS {
    PENDING
    SHIPPING
    DELIVERED
}

model Shipment {
    id      String @id @default(cuid())
    orderId String
    order   Order  @relation(fields: [orderId], references: [id])
    status  String // Can be enum: PENDING, SHIPPED, DELIVERED, etc.
    // Add more fields for tracking information, delivery addresses, etc.
}

// enum UploadStatus {
//     PENDING
//     PROCESSING
//     FAILED
//     SUCCESS
// }

model Media {
    id        String     @id @default(cuid())
    name      String
    url       String     @unique
    key       String
    storeId   String
    Store     Store      @relation("StoreToMedias", fields: [storeId], references: [id])
    productId String?
    Product   Product?   @relation("ProductToMedias", fields: [productId], references: [id])
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    Variant   Variant?   @relation(fields: [variantId], references: [id])
    variantId String?
    Category  Category[]
    Stores    Store[]    @relation("StoreToStoreLogo")

    @@index([storeId, productId])
}
