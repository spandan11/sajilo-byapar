generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum USER_ROLE {
    OWNER
    MANAGER
    WORKER
    CUSTOMER
}

model User {
    id         String       @id @default(cuid())
    fullName   String
    email      String       @unique
    password   String
    phoneNo    String       @unique
    address    String?
    isVerified Boolean      @default(false)
    role       USER_ROLE    @default(CUSTOMER)
    Invitation Invitation[] @relation("InvitedBy")
    // Store       Store[]
    storeId    String?
    Store      Store?       @relation(fields: [storeId], references: [id])
    Order      Order[]      @relation("UserToOrders")

    @@unique([email, phoneNo])
}

// Invitation schema
model Invitation {
    id          String  @id @default(cuid())
    email       String
    token       String
    invitedBy   User?   @relation("InvitedBy", fields: [invitedById], references: [id])
    invitedById String?
}

enum Plan {
    FREE
    PRO
}

model Store {
    id          String  @id @default(cuid())
    name        String  @unique
    description String?
    ownerId     String  @unique
    plan        Plan    @default(FREE)
    storeLogoId String?
    storeLogo   Media?  @relation("StoreToStoreLogo", fields: [storeLogoId], references: [id])
    storeSlogan String?

    users User[]

    // owner   User?   @relation(fields: [ownerId], references: [id])

    products   Product[]  @relation("StoreToProducts")
    categories Category[] @relation("StoreToCategories")
    // sizes      Size[]     @relation("StoreToSizes")
    // colors     Color[]    @relation("StoreToColors")
    medias     Media[]    @relation("StoreToMedias")
    orders     Order[]    @relation("StoreToOrders")

    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    StoreSettings StoreSettings[]
}

// Store settings schema
model StoreSettings {
    id       String @id @default(cuid())
    storeId  String
    store    Store  @relation(fields: [storeId], references: [id])
    timeZone String
    currency String
}

enum PRODUCT_STATUS {
    ACTIVE
    DRAFTED
    ARCHIVED
}

model Category {
    id        String    @id @default(cuid())
    name      String
    storeId   String
    Store     Store     @relation("StoreToCategories", fields: [storeId], references: [id])
    products  Product[] @relation("CategoryToProducts")
    imageUrl  String?
    media     Media?    @relation("CategoryToMedias", fields: [imageUrl], references: [url])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@index([storeId])
}

model Product {
    id                  String         @id @default(cuid())
    name                String
    description         String         @db.Text
    isFeatured          Boolean        @default(false)
    allowOrderWhenEmpty Boolean        @default(true)
    status              PRODUCT_STATUS @default(ACTIVE)
    storeId             String
    Store               Store          @relation("StoreToProducts", fields: [storeId], references: [id])
    Category            Category?      @relation("CategoryToProducts", fields: [categoryId], references: [id])
    categoryId          String?
    orderId             String?
    orders              Order?         @relation(fields: [orderId], references: [id])
    medias              Media[]        @relation("ProductToMedias")

    variants Variant[] @relation("ProductToVariants")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([storeId, orderId])
}

enum SIZES {
    S
    M
    L
    XL
    XXL
}

enum COLORS {
    RED
    BLUE
    GREEN
    WHITE
    BLACK
    ORANGE
    GRAY
}

model Variant {
    id        String   @id @default(cuid())
    productId String?
    Product   Product? @relation("ProductToVariants", fields: [productId], references: [id], onDelete: Cascade)

    stock    Int //Stock for that specific variant
    price    Float
    discount Float?
    size     SIZES
    color    COLORS

    images Media[]

    @@index([productId])
}

enum ORDER_STATUS {
    PENDING
    PROCESSING
    DISPATCHED
    DELIVERED
    CANCELLED
    RETURNED
}

enum PAYMENT_STATUS {
    PAID
    UNPAID
    REFUNDED
}

model Order {
    id            String         @id @default(cuid())
    amount        Float
    paymentStatus PAYMENT_STATUS @default(UNPAID)
    orderStatus   ORDER_STATUS   @default(PENDING) // Can be enum: CREATED, PROCESSING, COMPLETED, CANCELED, etc.
    storeId       String
    store         Store          @relation("StoreToOrders", fields: [storeId], references: [id])
    customerId    String?
    customer      User?          @relation("UserToOrders", fields: [customerId], references: [id])
    products      Product[]
    Shipment      Shipment[]
    Transaction   Transaction[]  @relation("OrderToTransactions")
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    @@index([storeId])
}

model Transaction {
    id            String         @id @default(cuid())
    orderId       String
    order         Order          @relation("OrderToTransactions", fields: [orderId], references: [id])
    amount        Float
    currency      String
    paymentMethod String //Added field to specify the payment method (e.g., credit card, paypal)
    status        PAYMENT_STATUS @default(UNPAID)
    // transactionId  String? // Unique identifier from payment gateway
    // paymentGateway String? // Payment gateway used (e.g., Stripe, PayPal)
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    @@index([orderId])
}

enum SHIPMENT_STATUS {
    PENDING
    SHIPPING
    DELIVERED
}

model Shipment {
    id                String          @id @default(cuid())
    orderId           String
    order             Order           @relation(fields: [orderId], references: [id])
    status            SHIPMENT_STATUS @default(PENDING)
    trackingNumber    String? // Optional field for tracking number
    deliveryAddress   String // Delivery address information
    carrier           String // Added field to specify the carrier (e.g., FedEx, UPS)
    estimatedDelivery DateTime? // Estimated delivery date
    actualDelivery    DateTime? // Actual delivery date
    shippingMethod    String? // e.g., standard, express
    shippingCost      Float? // Cost of shipping
    shippedAt         DateTime? // Date when the shipment was shipped
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt

    @@index([orderId])
}

model Media {
    id        String     @id @default(cuid())
    name      String
    url       String     @unique
    key       String
    storeId   String
    Store     Store      @relation("StoreToMedias", fields: [storeId], references: [id])
    productId String?
    Product   Product?   @relation("ProductToMedias", fields: [productId], references: [id])
    variantId String?
    Variant   Variant?   @relation(fields: [variantId], references: [id])
    Category  Category[] @relation("CategoryToMedias")
    Stores    Store[]    @relation("StoreToStoreLogo")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([storeId, productId])
}
